const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    // Add Flash dependency
    const flash_dep = b.dependency("flash", .{
        .target = target,
        .optimize = optimize,
    });
    const flash = flash_dep.module("flash");

    // Create the main executable
    const exe = b.addExecutable(.{
        .name = "{{project_name}}",
        .root_source_file = .{ .path = "src/main.zig" },
        .target = target,
        .optimize = optimize,
    });

    exe.root_module.addImport("flash", flash);
    b.installArtifact(exe);

    // Create run command
    const run_cmd = b.addRunArtifact(exe);
    run_cmd.step.dependOn(b.getInstallStep());
    if (b.args) |args| {
        run_cmd.addArgs(args);
    }

    const run_step = b.step("run", "Run {{project_name}}");
    run_step.dependOn(&run_cmd.step);

    // Unit tests
    const unit_tests = b.addTest(.{
        .root_source_file = .{ .path = "src/main.zig" },
        .target = target,
        .optimize = optimize,
    });
    unit_tests.root_module.addImport("flash", flash);

    const run_unit_tests = b.addRunArtifact(unit_tests);
    const test_step = b.step("test", "Run unit tests");
    test_step.dependOn(&run_unit_tests.step);

    {{#if with_completions}}
    // Shell completions
    const completions_step = b.step("completions", "Generate shell completions");
    const completions_cmd = b.addRunArtifact(exe);
    completions_cmd.addArgs(&.{ "completions", "--generate-all", "--output-dir", "completions/" });
    completions_step.dependOn(&completions_cmd.step);
    {{/if}}

    // Documentation
    const docs_step = b.step("docs", "Generate documentation");
    const docs_cmd = b.addRunArtifact(exe);
    docs_cmd.addArgs(&.{ "docs", "--format", "markdown", "--output", "docs/" });
    docs_step.dependOn(&docs_cmd.step);
}